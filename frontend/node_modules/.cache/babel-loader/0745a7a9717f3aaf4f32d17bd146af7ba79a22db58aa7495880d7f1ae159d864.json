{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/GuestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Guest.css';\nimport moment from 'moment/moment'; // Import moment.js library\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GuestPage() {\n  _s();\n  const [screeningsData, setScreeningsData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const screeningsResponse = await axios.get('http://localhost:8080/screenings/allScreeningTimesByMovies');\n        const screeningsData = await screeningsResponse.json();\n\n        // Fetch movie details for each movie concurrently using Promise.all\n        const movieDetailsPromises = screeningsData.map(async screening => {\n          const movieDetailsResponse = await axios.get(`http://localhost:8080/movies/idsearch/${screening.movieId}`);\n          return movieDetailsResponse.data;\n        });\n        const movieDetails = await Promise.all(movieDetailsPromises);\n\n        // Combine screenings with fetched movie details\n        const combinedData = screeningsData.map((screening, index) => {\n          return {\n            ...screening,\n            movieDetails: movieDetails[index]\n          };\n        });\n        setScreeningsData(combinedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatScreeningTime = timestampInMilliseconds => {\n    const dateObject = new Date(timestampInMilliseconds);\n    return moment(dateObject).format('dddd, HH:mm'); // Use moment.js for formatting\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guest-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome as Guest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screenings-container\",\n      children: Object.entries(screeningsData).map(([movie, screenings]) => {\n        var _screenings$movieDeta;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: ((_screenings$movieDeta = screenings.movieDetails) === null || _screenings$movieDeta === void 0 ? void 0 : _screenings$movieDeta.movieName) || 'Movie details not available'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"screening-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Screening Times:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: screenings && screenings.length > 0 ? screenings.map(screening => {\n                var _screening$room;\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [formatScreeningTime(screening.startTime), \" - Room: \", ((_screening$room = screening.room) === null || _screening$room === void 0 ? void 0 : _screening$room.name) || 'Room name not available']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 45\n                  }, this)\n                }, screening.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 41\n                }, this);\n              }) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No screenings available for this movie.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(GuestPage, \"qq2/Iy9c03+z6gNdLXVgUPkwQCo=\");\n_c = GuestPage;\nexport default GuestPage;\nvar _c;\n$RefreshReg$(_c, \"GuestPage\");","map":{"version":3,"names":["React","useState","useEffect","moment","axios","jsxDEV","_jsxDEV","GuestPage","_s","screeningsData","setScreeningsData","fetchData","screeningsResponse","get","json","movieDetailsPromises","map","screening","movieDetailsResponse","movieId","data","movieDetails","Promise","all","combinedData","index","error","console","formatScreeningTime","timestampInMilliseconds","dateObject","Date","format","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","movie","screenings","_screenings$movieDeta","movieName","length","_screening$room","startTime","room","name","id","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/GuestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Guest.css';\nimport moment from 'moment/moment'; // Import moment.js library\nimport axios from 'axios';\n\nfunction GuestPage() {\n    const [screeningsData, setScreeningsData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const screeningsResponse = await axios.get('http://localhost:8080/screenings/allScreeningTimesByMovies');\n                const screeningsData = await screeningsResponse.json();\n\n                // Fetch movie details for each movie concurrently using Promise.all\n                const movieDetailsPromises = screeningsData.map(async (screening) => {\n                    const movieDetailsResponse = await axios.get(`http://localhost:8080/movies/idsearch/${screening.movieId}`);\n                    return movieDetailsResponse.data;\n                });\n\n                const movieDetails = await Promise.all(movieDetailsPromises);\n\n                // Combine screenings with fetched movie details\n                const combinedData = screeningsData.map((screening, index) => {\n                    return { ...screening, movieDetails: movieDetails[index] };\n                });\n\n                setScreeningsData(combinedData);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    const formatScreeningTime = (timestampInMilliseconds) => {\n        const dateObject = new Date(timestampInMilliseconds);\n        return moment(dateObject).format('dddd, HH:mm'); // Use moment.js for formatting\n    };\n\n    return (\n        <div className=\"guest-page\">\n            <h1>Welcome as Guest</h1>\n            <div className=\"screenings-container\">\n                {/* Map over screeningsData to display movie details and screening times */}\n                {Object.entries(screeningsData).map(([movie, screenings]) => (\n                    <div key={movie.id} className=\"movie-container\">\n                        <h3>{screenings.movieDetails?.movieName || 'Movie details not available'}</h3>\n                        <div className=\"screening-info\">\n                            <h4>Screening Times:</h4>\n                            <ul>\n                                {screenings && screenings.length > 0 ? (\n                                    screenings.map(screening => (\n                                        <li key={screening.id}>\n                                            {/* Use formatScreeningTime function to convert timestamp */}\n                                            <p>{formatScreeningTime(screening.startTime)} - Room: {screening.room?.name || 'Room name not available'}</p>\n                                        </li>\n                                    ))\n                                ) : (\n                                    <p>No screenings available for this movie.</p>\n                                )}\n                            </ul>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default GuestPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,MAAM,MAAM,eAAe,CAAC,CAAC;AACpC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExDC,SAAS,CAAC,MAAM;IACZ,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,kBAAkB,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,4DAA4D,CAAC;QACxG,MAAMJ,cAAc,GAAG,MAAMG,kBAAkB,CAACE,IAAI,CAAC,CAAC;;QAEtD;QACA,MAAMC,oBAAoB,GAAGN,cAAc,CAACO,GAAG,CAAC,MAAOC,SAAS,IAAK;UACjE,MAAMC,oBAAoB,GAAG,MAAMd,KAAK,CAACS,GAAG,CAAE,yCAAwCI,SAAS,CAACE,OAAQ,EAAC,CAAC;UAC1G,OAAOD,oBAAoB,CAACE,IAAI;QACpC,CAAC,CAAC;QAEF,MAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACR,oBAAoB,CAAC;;QAE5D;QACA,MAAMS,YAAY,GAAGf,cAAc,CAACO,GAAG,CAAC,CAACC,SAAS,EAAEQ,KAAK,KAAK;UAC1D,OAAO;YAAE,GAAGR,SAAS;YAAEI,YAAY,EAAEA,YAAY,CAACI,KAAK;UAAE,CAAC;QAC9D,CAAC,CAAC;QAEFf,iBAAiB,CAACc,YAAY,CAAC;MACnC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDf,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMiB,mBAAmB,GAAIC,uBAAuB,IAAK;IACrD,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAACF,uBAAuB,CAAC;IACpD,OAAO1B,MAAM,CAAC2B,UAAU,CAAC,CAACE,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,oBACI1B,OAAA;IAAK2B,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvB5B,OAAA;MAAA4B,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBhC,OAAA;MAAK2B,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAEhCK,MAAM,CAACC,OAAO,CAAC/B,cAAc,CAAC,CAACO,GAAG,CAAC,CAAC,CAACyB,KAAK,EAAEC,UAAU,CAAC;QAAA,IAAAC,qBAAA;QAAA,oBACpDrC,OAAA;UAAoB2B,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC3C5B,OAAA;YAAA4B,QAAA,EAAK,EAAAS,qBAAA,GAAAD,UAAU,CAACrB,YAAY,cAAAsB,qBAAA,uBAAvBA,qBAAA,CAAyBC,SAAS,KAAI;UAA6B;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9EhC,OAAA;YAAK2B,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC3B5B,OAAA;cAAA4B,QAAA,EAAI;YAAgB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzBhC,OAAA;cAAA4B,QAAA,EACKQ,UAAU,IAAIA,UAAU,CAACG,MAAM,GAAG,CAAC,GAChCH,UAAU,CAAC1B,GAAG,CAACC,SAAS;gBAAA,IAAA6B,eAAA;gBAAA,oBACpBxC,OAAA;kBAAA4B,QAAA,eAEI5B,OAAA;oBAAA4B,QAAA,GAAIN,mBAAmB,CAACX,SAAS,CAAC8B,SAAS,CAAC,EAAC,WAAS,EAAC,EAAAD,eAAA,GAAA7B,SAAS,CAAC+B,IAAI,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,KAAI,yBAAyB;kBAAA;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI;gBAAC,GAFxGrB,SAAS,CAACiC,EAAE;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAGjB,CAAC;cAAA,CACR,CAAC,gBAEFhC,OAAA;gBAAA4B,QAAA,EAAG;cAAuC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG;YAChD;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA,GAhBAG,KAAK,CAACS,EAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiBb,CAAC;MAAA,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC9B,EAAA,CAhEQD,SAAS;AAAA4C,EAAA,GAAT5C,SAAS;AAkElB,eAAeA,SAAS;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}