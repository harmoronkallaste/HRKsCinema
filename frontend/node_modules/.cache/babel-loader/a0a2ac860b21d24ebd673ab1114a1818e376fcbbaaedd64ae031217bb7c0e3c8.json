{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/GuestPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GuestPage = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true); // State to manage loading status\n  const [error, setError] = useState(null); // State to manage errors\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/screenings/allScreeningTimesByMovies');\n        console.log('Response from API:', response.data); // Debugging statement\n        // Extract the movie names from the response data\n        const movieNames = response.data.map(movie => movie.movieName);\n        // Get the first 10 unique movie names\n        const uniqueMovies = Array.from(new Set(movieNames)).slice(0, 10);\n        console.log('Movies:', uniqueMovies); // Debugging statement\n        setMovies(uniqueMovies);\n        setLoading(false); // Set loading to false after fetching data\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n        setError(error); // Set error state if there's an error\n        setLoading(false); // Set loading to false in case of error\n      }\n    };\n    fetchMovies();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this); // Display loading state while fetching data\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this); // Display error message if there's an error\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 10 Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: movies.length > 0 ? movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: movie\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No movies found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(GuestPage, \"6wevkd2F3PCn4cJR5qV0d4ozTn8=\");\n_c = GuestPage;\nexport default GuestPage;\nvar _c;\n$RefreshReg$(_c, \"GuestPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GuestPage","_s","movies","setMovies","loading","setLoading","error","setError","fetchMovies","response","get","console","log","data","movieNames","map","movie","movieName","uniqueMovies","Array","from","Set","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","message","length","index","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/GuestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst GuestPage = () => {\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(true); // State to manage loading status\n    const [error, setError] = useState(null); // State to manage errors\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                const response = await axios.get('http://localhost:8080/screenings/allScreeningTimesByMovies');\n                console.log('Response from API:', response.data); // Debugging statement\n                // Extract the movie names from the response data\n                const movieNames = response.data.map(movie => movie.movieName);\n                // Get the first 10 unique movie names\n                const uniqueMovies = Array.from(new Set(movieNames)).slice(0, 10);\n                console.log('Movies:', uniqueMovies); // Debugging statement\n                setMovies(uniqueMovies);\n                setLoading(false); // Set loading to false after fetching data\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n                setError(error); // Set error state if there's an error\n                setLoading(false); // Set loading to false in case of error\n            }\n        };\n\n        fetchMovies();\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>; // Display loading state while fetching data\n    }\n\n    if (error) {\n        return <div>Error: {error.message}</div>; // Display error message if there's an error\n    }\n\n    return (\n        <div>\n            <h2>Top 10 Movies</h2>\n            <ul>\n                {/* Render the list of movie names */}\n                {movies.length > 0 ? (\n                    movies.map((movie, index) => (\n                        <li key={index}>{movie}</li>\n                    ))\n                ) : (\n                    <li>No movies found</li>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default GuestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}