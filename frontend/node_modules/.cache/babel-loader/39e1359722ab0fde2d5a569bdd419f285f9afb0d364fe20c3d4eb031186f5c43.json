{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to the current day of the week\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (!Array.isArray(data)) {\n                    throw new Error('Data is not an array!');\n                }\n                // Fetch the number of reserved seats for each screening\n                return Promise.all(data.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null }; // Indicate that seats are not available\n                        })\n                ));\n            })\n            .then(allScreeningsWithReservedSeats => {\n                setScreenings(allScreeningsWithReservedSeats.filter(screening =>\n                    moment(screening.screening.startTime).format('ddd') === selectedDay\n                ));\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay]);\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{ backgroundImage: `url(${screening.movie.picUrl})` }}>\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>Start Time: {moment(screening.screening.startTime).format('LLL')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings; */\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllScreenings() {\n  _s();\n  const [screenings, setScreenings] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(moment().format('ddd'));\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [selectedTimes, setSelectedTimes] = useState([]);\n\n  // Function to toggle times\n  const toggleTime = newTime => {\n    let updatedTimes = [...selectedTimes];\n    if (updatedTimes.includes(newTime)) {\n      // Remove the time if it's already selected\n      updatedTimes = updatedTimes.filter(time => time !== newTime);\n    } else {\n      if (updatedTimes.length >= 2) {\n        // If two times are already selected, adjust the selection\n        const timesMoments = updatedTimes.map(time => moment(time, \"HH:mm\"));\n        const newTimeMoment = moment(newTime, \"HH:mm\");\n        const latestTime = moment.max(timesMoments);\n        if (newTimeMoment.isAfter(latestTime)) {\n          // If the new time is later than the current latest time, keep the earliest and add the new time\n          const earliestTime = moment.min(timesMoments);\n          updatedTimes = [earliestTime.format(\"HH:mm\"), newTime];\n        } else {\n          // If the new time is not after the latest, simply add it (this will be handled by sorting and limit logic below)\n          updatedTimes.push(newTime);\n        }\n      } else {\n        // Less than 2 times are selected, simply add the new time\n        updatedTimes.push(newTime);\n      }\n    }\n\n    // Ensure we have at most 2 times selected after adding the new time, by keeping the earliest and latest times\n    if (updatedTimes.length > 2) {\n      updatedTimes.sort((a, b) => moment(a, \"HH:mm\").diff(moment(b, \"HH:mm\")));\n      updatedTimes = [updatedTimes[0], updatedTimes[updatedTimes.length - 1]]; // Keep only the earliest and latest\n    }\n    setSelectedTimes(updatedTimes);\n  };\n  const toggleGenre = genre => {\n    setSelectedGenres(currentGenres => currentGenres.includes(genre) ? currentGenres.filter(g => g !== genre) : [...currentGenres, genre]);\n  };\n  useEffect(() => {\n    fetch('http://localhost:8080/screenings/allScreenings').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      const screeningsWithGenres = data.map(screening => ({\n        ...screening,\n        genres: screening.movie.genre.split(',').map(genre => genre.trim()),\n        availableSeats: null\n      }));\n      return Promise.all(screeningsWithGenres.map(screening => fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`).then(res => res.json()).then(numberOfReservedSeats => ({\n        ...screening,\n        availableSeats: screening.room.totalSeats - numberOfReservedSeats\n      })).catch(error => {\n        console.error('Error fetching reserved seats:', error);\n        return {\n          ...screening,\n          availableSeats: null\n        };\n      })));\n    }).then(updatedScreenings => {\n      setScreenings(updatedScreenings);\n    }).catch(error => {\n      console.error('Error fetching screenings:', error);\n    });\n  }, [selectedDay, selectedGenres, selectedTimes]);\n  const genreButtons = ['Drama', 'Crime', 'Action', 'Biography', 'History'];\n  const timeButtons = [\"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"];\n\n  // Filtered screenings logic\n  const filteredScreenings = screenings.filter(screening => {\n    const screeningStartTime = moment(screening.screening.startTime);\n    const dayMatch = screeningStartTime.format('ddd') === selectedDay;\n    const genreMatch = selectedGenres.length === 0 || selectedGenres.some(genre => screening.genres.includes(genre));\n    let timeMatch = selectedTimes.length === 0; // Default to true if no time selected, false otherwise\n    if (selectedTimes.length > 0) {\n      const screeningTimeOnly = screeningStartTime.format(\"HH:mm\");\n      const screeningMomentTimeOnly = moment(screeningTimeOnly, \"HH:mm\");\n      if (selectedTimes.length === 1) {\n        const singleTime = moment(selectedTimes[0], \"HH:mm\");\n        timeMatch = screeningMomentTimeOnly.isSameOrAfter(singleTime);\n      } else {\n        const timesMoments = selectedTimes.map(time => moment(time, \"HH:mm\"));\n        const earliestTime = moment.min(timesMoments);\n        const latestTime = moment.max(timesMoments);\n        timeMatch = screeningMomentTimeOnly.isBetween(earliestTime, latestTime, undefined, '[]');\n      }\n    }\n    return dayMatch && genreMatch && timeMatch;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.allScreenings,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.menuBar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.filtersTitle,\n        children: \" Filters \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dayOptions,\n          children: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.dayButton} ${selectedDay === day ? styles.active : ''}`,\n            onClick: () => setSelectedDay(day),\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.timeOptions,\n          children: timeButtons.map(time => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.dayButton} ${selectedTimes.includes(time) ? styles.active : ''}`,\n            onClick: () => toggleTime(time),\n            children: time\n          }, time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.genreOptions,\n          children: genreButtons.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: ` ${styles.dayButton} ${styles.genreButton} ${selectedGenres.includes(genre) ? styles.active : ''}`,\n            onClick: () => toggleGenre(genre),\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.screeningsList,\n      children: filteredScreenings.map(screening => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.screeningContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.moviePoster,\n          style: {\n            backgroundImage: `url(${screening.movie.picUrl})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.movieInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: screening.movie.movieName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: moment(screening.screening.startTime).format('MMM Do YYYY, ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rating: \", screening.movie.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Room: \", screening.room.room_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Available Seats: \", screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.screeningButton} ${styles.getTicketsButton}`,\n            children: \"Get tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.screeningButton,\n            children: \"View movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.screeningButton,\n            children: \"Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 25\n        }, this)]\n      }, screening.screening.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n}\n_s(AllScreenings, \"sqtxaGXjWXnpuq/GApBHLQgwtk4=\");\n_c = AllScreenings;\nexport default AllScreenings;\nvar _c;\n$RefreshReg$(_c, \"AllScreenings\");","map":{"version":3,"names":["React","useState","useEffect","styles","moment","jsxDEV","_jsxDEV","AllScreenings","_s","screenings","setScreenings","selectedDay","setSelectedDay","format","selectedGenres","setSelectedGenres","selectedTimes","setSelectedTimes","toggleTime","newTime","updatedTimes","includes","filter","time","length","timesMoments","map","newTimeMoment","latestTime","max","isAfter","earliestTime","min","push","sort","a","b","diff","toggleGenre","genre","currentGenres","g","fetch","then","response","ok","Error","status","json","data","screeningsWithGenres","screening","genres","movie","split","trim","availableSeats","Promise","all","id","res","numberOfReservedSeats","room","totalSeats","catch","error","console","updatedScreenings","genreButtons","timeButtons","filteredScreenings","screeningStartTime","startTime","dayMatch","genreMatch","some","timeMatch","screeningTimeOnly","screeningMomentTimeOnly","singleTime","isSameOrAfter","isBetween","undefined","className","allScreenings","children","menuBar","filtersTitle","fileName","_jsxFileName","lineNumber","columnNumber","buttonContainer","dayOptions","day","dayButton","active","onClick","timeOptions","genreOptions","genreButton","screeningsList","screeningContainer","moviePoster","style","backgroundImage","picUrl","movieInfo","movieName","rating","room_name","buttonGroup","screeningButton","getTicketsButton","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to the current day of the week\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (!Array.isArray(data)) {\n                    throw new Error('Data is not an array!');\n                }\n                // Fetch the number of reserved seats for each screening\n                return Promise.all(data.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null }; // Indicate that seats are not available\n                        })\n                ));\n            })\n            .then(allScreeningsWithReservedSeats => {\n                setScreenings(allScreeningsWithReservedSeats.filter(screening =>\n                    moment(screening.screening.startTime).format('ddd') === selectedDay\n                ));\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay]);\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{ backgroundImage: `url(${screening.movie.picUrl})` }}>\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>Start Time: {moment(screening.screening.startTime).format('LLL')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings; */\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd'));\n    const [selectedGenres, setSelectedGenres] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n\n    // Function to toggle times\n    const toggleTime = (newTime) => {\n        let updatedTimes = [...selectedTimes];\n\n        if (updatedTimes.includes(newTime)) {\n            // Remove the time if it's already selected\n            updatedTimes = updatedTimes.filter(time => time !== newTime);\n        } else {\n            if (updatedTimes.length >= 2) {\n                // If two times are already selected, adjust the selection\n                const timesMoments = updatedTimes.map(time => moment(time, \"HH:mm\"));\n                const newTimeMoment = moment(newTime, \"HH:mm\");\n                const latestTime = moment.max(timesMoments);\n\n                if (newTimeMoment.isAfter(latestTime)) {\n                    // If the new time is later than the current latest time, keep the earliest and add the new time\n                    const earliestTime = moment.min(timesMoments);\n                    updatedTimes = [earliestTime.format(\"HH:mm\"), newTime];\n                } else {\n                    // If the new time is not after the latest, simply add it (this will be handled by sorting and limit logic below)\n                    updatedTimes.push(newTime);\n                }\n            } else {\n                // Less than 2 times are selected, simply add the new time\n                updatedTimes.push(newTime);\n            }\n        }\n\n        // Ensure we have at most 2 times selected after adding the new time, by keeping the earliest and latest times\n        if (updatedTimes.length > 2) {\n            updatedTimes.sort((a, b) => moment(a, \"HH:mm\").diff(moment(b, \"HH:mm\")));\n            updatedTimes = [updatedTimes[0], updatedTimes[updatedTimes.length - 1]]; // Keep only the earliest and latest\n        }\n\n        setSelectedTimes(updatedTimes);\n    };\n\n    const toggleGenre = (genre) => {\n        setSelectedGenres(currentGenres =>\n            currentGenres.includes(genre) ? currentGenres.filter(g => g !== genre) : [...currentGenres, genre]\n        );\n    };\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                const screeningsWithGenres = data.map(screening => ({\n                    ...screening,\n                    genres: screening.movie.genre.split(',').map(genre => genre.trim()),\n                    availableSeats: null\n                }));\n\n                return Promise.all(screeningsWithGenres.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null };\n                        })\n                ));\n            })\n            .then(updatedScreenings => {\n                setScreenings(updatedScreenings);\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay, selectedGenres, selectedTimes]);\n\n    const genreButtons = ['Drama', 'Crime', 'Action', 'Biography', 'History'];\n    const timeButtons = [\"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"];\n\n    // Filtered screenings logic\n    const filteredScreenings = screenings.filter(screening => {\n        const screeningStartTime = moment(screening.screening.startTime);\n        const dayMatch = screeningStartTime.format('ddd') === selectedDay;\n        const genreMatch = selectedGenres.length === 0 || selectedGenres.some(genre => screening.genres.includes(genre));\n\n        let timeMatch = selectedTimes.length === 0; // Default to true if no time selected, false otherwise\n        if (selectedTimes.length > 0) {\n            const screeningTimeOnly = screeningStartTime.format(\"HH:mm\");\n            const screeningMomentTimeOnly = moment(screeningTimeOnly, \"HH:mm\");\n            if (selectedTimes.length === 1) {\n                const singleTime = moment(selectedTimes[0], \"HH:mm\");\n                timeMatch = screeningMomentTimeOnly.isSameOrAfter(singleTime);\n            } else {\n                const timesMoments = selectedTimes.map(time => moment(time, \"HH:mm\"));\n                const earliestTime = moment.min(timesMoments);\n                const latestTime = moment.max(timesMoments);\n                timeMatch = screeningMomentTimeOnly.isBetween(earliestTime, latestTime, undefined, '[]');\n            }\n        }\n\n        return dayMatch && genreMatch && timeMatch;\n    });\n\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                <div className={styles.filtersTitle}> Filters </div>\n                <div className={styles.buttonContainer}>\n                    <div className={styles.dayOptions}>\n                        {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                            <button\n                                key={day}\n                                className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                                onClick={() => setSelectedDay(day)}\n                            >\n                                {day}\n                            </button>\n\n                        ))}\n                    </div>\n                    <div className={styles.timeOptions}>\n                        {timeButtons.map(time => (\n                            <button\n                                key={time}\n                                className={`${styles.dayButton} ${selectedTimes.includes(time) ? styles.active : ''}`}\n                                onClick={() => toggleTime(time)}\n                            >\n                                {time}\n                            </button>\n                        ))}\n                    </div>\n                    <div className={styles.genreOptions}>\n                        {genreButtons.map((genre) => (\n                            <button\n                                key={genre}\n                                className={` ${styles.dayButton} ${styles.genreButton} ${selectedGenres.includes(genre) ? styles.active : ''}`}\n                                onClick={() => toggleGenre(genre)}\n                            >\n                                {genre}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            {/*<div className={styles.genreFilter}>\n                {['Drama', 'Crime', 'Action', 'Biography', 'History'].map(genre => (\n                    <label key={genre}>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedGenres.includes(genre)}\n                            onChange={() => toggleGenre(genre)}\n                        />\n                        {genre}\n                    </label>\n                ))}\n            </div> */}\n            <div className={styles.screeningsList}>\n                {filteredScreenings.map(screening => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{backgroundImage: `url(${screening.movie.picUrl})`}}>\n                            {/* Image will be displayed via background */}\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>{moment(screening.screening.startTime).format('MMM Do YYYY, ')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}