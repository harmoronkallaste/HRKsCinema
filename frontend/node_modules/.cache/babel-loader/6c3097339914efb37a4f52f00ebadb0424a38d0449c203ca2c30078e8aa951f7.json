{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/MovieScreenings.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Dropdown, Container, Row, Col, ListGroup } from 'react-bootstrap';\nimport moment from 'moment';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Make sure you import Bootstrap CSS\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [days, setDays] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n\n                const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n                const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n\n                setDays(Array.from(daySet));\n                setTimes(Array.from(timeSet));\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('LLL');\n    };\n\n    const isChecked = (array, value) => array.includes(value);\n\n    // Toggles day selection\n    const toggleDaySelection = (day) => {\n        setSelectedDays((prevSelectedDays) =>\n            prevSelectedDays.includes(day)\n                ? prevSelectedDays.filter((d) => d !== day)\n                : [...prevSelectedDays, day]\n        );\n    };\n\n    // Toggles time selection\n    const toggleTimeSelection = (time) => {\n        setSelectedTimes((prevSelectedTimes) =>\n            prevSelectedTimes.includes(time)\n                ? prevSelectedTimes.filter((t) => t !== time)\n                : [...prevSelectedTimes, time]\n        );\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const handleDaySelection = value => {\n        setSelectedDays(\n            selectedDays.includes(value)\n                ? selectedDays.filter(day => day !== value)\n                : [...selectedDays, value]\n        );\n    };\n\n    const handleTimeSelection = value => {\n        setSelectedTimes(\n            selectedTimes.includes(value)\n                ? selectedTimes.filter(time => time !== value)\n                : [...selectedTimes, value]\n        );\n    };\n\n    const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const screeningTimes = [\"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\"];\n\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.filtersContainer}>\n                        <Dropdown\n                            title=\"Days\"\n                            items={days}\n                            selectedItems={selectedDays}\n                            onToggle={handleDaySelection}\n                        />\n                        <Dropdown\n                            title=\"Times\"\n                            items={times}\n                            selectedItems={selectedTimes}\n                            onToggle={handleTimeSelection}\n                        />\n                    </div>\n                    <Container>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"warning\">Filter</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Row style={{ minWidth: '50vw' }}>\n                                    <Col>\n                                        <ListGroup variant=\"flush\">\n                                            {daysOfWeek.map((day, index) => (\n                                                <ListGroup.Item key={index} onClick={() => toggleDaySelection(day)}>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        checked={isChecked(selectedDays, day)}\n                                                        onChange={() => {}}\n                                                    />{' '}\n                                                    {day}\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </Col>\n                                    <Col>\n                                        <ListGroup>\n                                            {screeningTimes.map((time, index) => (\n                                                <ListGroup.Item key={index} onClick={() => toggleTimeSelection(time)}>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        checked={isChecked(selectedTimes, time)}\n                                                        onChange={() => {}}\n                                                    />{' '}\n                                                    {time}\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </Col>\n                                </Row>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Container>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n*/\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport styles from '../style/MovieScreenings.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useOutsideAlerter(ref, setter) {\n  _s();\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setter(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, setter]);\n}\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction Dropdown({\n  title,\n  items,\n  selectedItems,\n  onToggle\n}) {\n  _s2();\n  const [isOpen, setIsOpen] = useState(false);\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, setIsOpen);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.dropdown,\n    ref: wrapperRef,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.dropdownButton,\n      onClick: () => setIsOpen(!isOpen),\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.dropdownContent,\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.dropdownLabel,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: item,\n          checked: selectedItems.includes(item),\n          onChange: e => onToggle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 29\n        }, this), item]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n}\n_s2(Dropdown, \"skvww6F3Y5scavckn4I3Wn81LKA=\", false, function () {\n  return [useOutsideAlerter];\n});\n_c = Dropdown;\nfunction MovieScreenings() {\n  _s3();\n  const navigate = useNavigate();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [selectedDays, setSelectedDays] = useState([]);\n  const [selectedTimes, setSelectedTimes] = useState([]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    fetch(`http://localhost:8080/screenings/movie/${id}`).then(response => response.json()).then(data => {\n      setMovieInfo(data);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, [id]);\n  const formatScreeningTime = timestamp => {\n    return moment(timestamp).format('dddd HH:mm, MMM Do YYYY');\n  };\n  const goToScreening = screeningId => {\n    navigate(`/screenings/info/${screeningId}`);\n  };\n  const filteredScreenings = movieInfo === null || movieInfo === void 0 ? void 0 : movieInfo.screenings.filter(screening => {\n    const day = moment(screening.screening.startTime).format('ddd');\n    const time = moment(screening.screening.startTime).format('HH:mm');\n    return (selectedDays.length === 0 || selectedDays.includes(day)) && (selectedTimes.length === 0 || selectedTimes.includes(time));\n  });\n  if (!movieInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.movieScreeningsBody,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.movieInfoContainerWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.movieInfoContainerLeft,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: `${styles.containerHeader} ${styles.movieTitle}`,\n          children: movieInfo.movie.movieName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.movieDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.movieInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Director(s):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.directors]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Release Year:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.releaseYear]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"IMDb Rating:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.rating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Certificate:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.certificate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Runtime:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.runTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.moviePoster,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movieInfo.movie.picUrl,\n              alt: movieInfo.movie.movieName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.movieInfoContainerRight,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.screeningGrid,\n          children: filteredScreenings.map(screening => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.screeningItem,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.directToScreeningButton,\n              onClick: () => goToScreening(screening.screening.id),\n              children: formatScreeningTime(screening.screening.startTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this)\n          }, screening.screening.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 9\n  }, this);\n}\n_s3(MovieScreenings, \"eVr5i62D69OdJ0nC59pzbkErSAI=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c2 = MovieScreenings;\nexport default MovieScreenings;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dropdown\");\n$RefreshReg$(_c2, \"MovieScreenings\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","moment","styles","jsxDEV","_jsxDEV","useOutsideAlerter","ref","setter","_s","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Dropdown","title","items","selectedItems","onToggle","_s2","isOpen","setIsOpen","wrapperRef","className","dropdown","children","dropdownButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","dropdownContent","map","item","dropdownLabel","type","value","checked","includes","onChange","e","_c","MovieScreenings","_s3","navigate","movieInfo","setMovieInfo","selectedDays","setSelectedDays","selectedTimes","setSelectedTimes","id","fetch","then","response","json","data","catch","error","console","formatScreeningTime","timestamp","format","goToScreening","screeningId","filteredScreenings","screenings","filter","screening","day","startTime","time","length","movieScreeningsBody","movieInfoContainerWrapper","movieInfoContainerLeft","containerHeader","movieTitle","movie","movieName","movieDetails","directors","releaseYear","rating","certificate","runTime","moviePoster","src","picUrl","alt","movieInfoContainerRight","screeningGrid","screeningItem","directToScreeningButton","_c2","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/MovieScreenings.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Dropdown, Container, Row, Col, ListGroup } from 'react-bootstrap';\nimport moment from 'moment';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Make sure you import Bootstrap CSS\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [days, setDays] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n\n                const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n                const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n\n                setDays(Array.from(daySet));\n                setTimes(Array.from(timeSet));\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('LLL');\n    };\n\n    const isChecked = (array, value) => array.includes(value);\n\n    // Toggles day selection\n    const toggleDaySelection = (day) => {\n        setSelectedDays((prevSelectedDays) =>\n            prevSelectedDays.includes(day)\n                ? prevSelectedDays.filter((d) => d !== day)\n                : [...prevSelectedDays, day]\n        );\n    };\n\n    // Toggles time selection\n    const toggleTimeSelection = (time) => {\n        setSelectedTimes((prevSelectedTimes) =>\n            prevSelectedTimes.includes(time)\n                ? prevSelectedTimes.filter((t) => t !== time)\n                : [...prevSelectedTimes, time]\n        );\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const handleDaySelection = value => {\n        setSelectedDays(\n            selectedDays.includes(value)\n                ? selectedDays.filter(day => day !== value)\n                : [...selectedDays, value]\n        );\n    };\n\n    const handleTimeSelection = value => {\n        setSelectedTimes(\n            selectedTimes.includes(value)\n                ? selectedTimes.filter(time => time !== value)\n                : [...selectedTimes, value]\n        );\n    };\n\n    const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const screeningTimes = [\"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\"];\n\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.filtersContainer}>\n                        <Dropdown\n                            title=\"Days\"\n                            items={days}\n                            selectedItems={selectedDays}\n                            onToggle={handleDaySelection}\n                        />\n                        <Dropdown\n                            title=\"Times\"\n                            items={times}\n                            selectedItems={selectedTimes}\n                            onToggle={handleTimeSelection}\n                        />\n                    </div>\n                    <Container>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"warning\">Filter</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Row style={{ minWidth: '50vw' }}>\n                                    <Col>\n                                        <ListGroup variant=\"flush\">\n                                            {daysOfWeek.map((day, index) => (\n                                                <ListGroup.Item key={index} onClick={() => toggleDaySelection(day)}>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        checked={isChecked(selectedDays, day)}\n                                                        onChange={() => {}}\n                                                    />{' '}\n                                                    {day}\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </Col>\n                                    <Col>\n                                        <ListGroup>\n                                            {screeningTimes.map((time, index) => (\n                                                <ListGroup.Item key={index} onClick={() => toggleTimeSelection(time)}>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        checked={isChecked(selectedTimes, time)}\n                                                        onChange={() => {}}\n                                                    />{' '}\n                                                    {time}\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </Col>\n                                </Row>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Container>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n*/\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction useOutsideAlerter(ref, setter) {\n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setter(false);\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref, setter]);\n}\n\nfunction Dropdown({ title, items, selectedItems, onToggle }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, setIsOpen);\n\n    return (\n        <div className={styles.dropdown} ref={wrapperRef}>\n            <button className={styles.dropdownButton} onClick={() => setIsOpen(!isOpen)}>\n                {title}\n            </button>\n            {isOpen && (\n                <div className={styles.dropdownContent}>\n                    {items.map(item => (\n                        <label key={item} className={styles.dropdownLabel}>\n                            <input\n                                type=\"checkbox\"\n                                value={item}\n                                checked={selectedItems.includes(item)}\n                                onChange={(e) => onToggle(e.target.value)}\n                            />\n                            {item}\n                        </label>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('dddd HH:mm, MMM Do YYYY');\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}