{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/MovieScreenings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Dropdown, Container, Row, Col, ListGroup } from 'react-bootstrap';\nimport moment from 'moment';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Make sure you import Bootstrap CSS\nimport styles from '../style/MovieScreenings.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieScreenings() {\n  _s();\n  const navigate = useNavigate();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [days, setDays] = useState([]);\n  const [times, setTimes] = useState([]);\n  const [selectedDays, setSelectedDays] = useState([]);\n  const [selectedTimes, setSelectedTimes] = useState([]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    fetch(`http://localhost:8080/screenings/movie/${id}`).then(response => response.json()).then(data => {\n      setMovieInfo(data);\n      const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n      const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n      setDays(Array.from(daySet));\n      setTimes(Array.from(timeSet));\n    }).catch(error => console.error('Error fetching data:', error));\n  }, [id]);\n  const formatScreeningTime = timestamp => {\n    return moment(timestamp).format('LLL');\n  };\n  const isChecked = (array, value) => array.includes(value);\n\n  // Toggles day selection\n  const toggleDaySelection = day => {\n    setSelectedDays(prevSelectedDays => prevSelectedDays.includes(day) ? prevSelectedDays.filter(d => d !== day) : [...prevSelectedDays, day]);\n  };\n\n  // Toggles time selection\n  const toggleTimeSelection = time => {\n    setSelectedTimes(prevSelectedTimes => prevSelectedTimes.includes(time) ? prevSelectedTimes.filter(t => t !== time) : [...prevSelectedTimes, time]);\n  };\n  const goToScreening = screeningId => {\n    navigate(`/screenings/info/${screeningId}`);\n  };\n  const handleDaySelection = value => {\n    setSelectedDays(selectedDays.includes(value) ? selectedDays.filter(day => day !== value) : [...selectedDays, value]);\n  };\n  const handleTimeSelection = value => {\n    setSelectedTimes(selectedTimes.includes(value) ? selectedTimes.filter(time => time !== value) : [...selectedTimes, value]);\n  };\n  const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const screeningTimes = [\"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\"];\n  const filteredScreenings = movieInfo === null || movieInfo === void 0 ? void 0 : movieInfo.screenings.filter(screening => {\n    const day = moment(screening.screening.startTime).format('ddd');\n    const time = moment(screening.screening.startTime).format('HH:mm');\n    return (selectedDays.length === 0 || selectedDays.includes(day)) && (selectedTimes.length === 0 || selectedTimes.includes(time));\n  });\n  if (!movieInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.movieScreeningsBody,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.movieInfoContainerWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.movieInfoContainerLeft,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: `${styles.containerHeader} ${styles.movieTitle}`,\n          children: movieInfo.movie.movieName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.movieDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.movieInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Director(s):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.directors]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Release Year:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.releaseYear]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"IMDb Rating:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.rating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Certificate:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.certificate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Runtime:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 32\n              }, this), \" \", movieInfo.movie.runTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.moviePoster,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movieInfo.movie.picUrl,\n              alt: movieInfo.movie.movieName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.movieInfoContainerRight,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filtersContainer,\n          children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n            title: \"Days\",\n            items: days,\n            selectedItems: selectedDays,\n            onToggle: handleDaySelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            title: \"Times\",\n            items: times,\n            selectedItems: selectedTimes,\n            onToggle: handleTimeSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.screeningGrid,\n          children: filteredScreenings.map(screening => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.screeningItem,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.directToScreeningButton,\n              onClick: () => goToScreening(screening.screening.id),\n              children: formatScreeningTime(screening.screening.startTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)\n          }, screening.screening.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(MovieScreenings, \"9kw7lKy04UQUQZPhBdUP8+6fcKg=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = MovieScreenings;\nexport default MovieScreenings;\n\n/*import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction useOutsideAlerter(ref, setter) {\n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setter(false);\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref, setter]);\n}\n\nfunction Dropdown({ title, items, selectedItems, onToggle }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, setIsOpen);\n\n    return (\n        <div className={styles.dropdown} ref={wrapperRef}>\n            <button className={styles.dropdownButton} onClick={() => setIsOpen(!isOpen)}>\n                {title}\n            </button>\n            {isOpen && (\n                <div className={styles.dropdownContent}>\n                    {items.map(item => (\n                        <label key={item} className={styles.dropdownLabel}>\n                            <input\n                                type=\"checkbox\"\n                                value={item}\n                                checked={selectedItems.includes(item)}\n                                onChange={(e) => onToggle(e.target.value)}\n                            />\n                            {item}\n                        </label>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [days, setDays] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n\n                const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n                const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n\n                setDays(Array.from(daySet));\n                setTimes(Array.from(timeSet));\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('LLL');\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const handleDaySelection = value => {\n        setSelectedDays(\n            selectedDays.includes(value)\n                ? selectedDays.filter(day => day !== value)\n                : [...selectedDays, value]\n        );\n    };\n\n    const handleTimeSelection = value => {\n        setSelectedTimes(\n            selectedTimes.includes(value)\n                ? selectedTimes.filter(time => time !== value)\n                : [...selectedTimes, value]\n        );\n    };\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.filtersContainer}>\n                        <Dropdown\n                            title=\"Days\"\n                            items={days}\n                            selectedItems={selectedDays}\n                            onToggle={handleDaySelection}\n                        />\n                        <Dropdown\n                            title=\"Times\"\n                            items={times}\n                            selectedItems={selectedTimes}\n                            onToggle={handleTimeSelection}\n                        />\n                    </div>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n*/\nvar _c;\n$RefreshReg$(_c, \"MovieScreenings\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Dropdown","Container","Row","Col","ListGroup","moment","styles","jsxDEV","_jsxDEV","MovieScreenings","_s","navigate","movieInfo","setMovieInfo","days","setDays","times","setTimes","selectedDays","setSelectedDays","selectedTimes","setSelectedTimes","id","fetch","then","response","json","data","daySet","Set","screenings","map","s","screening","startTime","format","timeSet","Array","from","catch","error","console","formatScreeningTime","timestamp","isChecked","array","value","includes","toggleDaySelection","day","prevSelectedDays","filter","d","toggleTimeSelection","time","prevSelectedTimes","t","goToScreening","screeningId","handleDaySelection","handleTimeSelection","daysOfWeek","screeningTimes","filteredScreenings","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","movieScreeningsBody","movieInfoContainerWrapper","movieInfoContainerLeft","containerHeader","movieTitle","movie","movieName","movieDetails","directors","releaseYear","rating","certificate","runTime","moviePoster","src","picUrl","alt","movieInfoContainerRight","filtersContainer","title","items","selectedItems","onToggle","screeningGrid","screeningItem","directToScreeningButton","onClick","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/MovieScreenings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Dropdown, Container, Row, Col, ListGroup } from 'react-bootstrap';\nimport moment from 'moment';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Make sure you import Bootstrap CSS\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [days, setDays] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n\n                const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n                const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n\n                setDays(Array.from(daySet));\n                setTimes(Array.from(timeSet));\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('LLL');\n    };\n\n    const isChecked = (array, value) => array.includes(value);\n\n    // Toggles day selection\n    const toggleDaySelection = (day) => {\n        setSelectedDays((prevSelectedDays) =>\n            prevSelectedDays.includes(day)\n                ? prevSelectedDays.filter((d) => d !== day)\n                : [...prevSelectedDays, day]\n        );\n    };\n\n    // Toggles time selection\n    const toggleTimeSelection = (time) => {\n        setSelectedTimes((prevSelectedTimes) =>\n            prevSelectedTimes.includes(time)\n                ? prevSelectedTimes.filter((t) => t !== time)\n                : [...prevSelectedTimes, time]\n        );\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const handleDaySelection = value => {\n        setSelectedDays(\n            selectedDays.includes(value)\n                ? selectedDays.filter(day => day !== value)\n                : [...selectedDays, value]\n        );\n    };\n\n    const handleTimeSelection = value => {\n        setSelectedTimes(\n            selectedTimes.includes(value)\n                ? selectedTimes.filter(time => time !== value)\n                : [...selectedTimes, value]\n        );\n    };\n\n    const daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const screeningTimes = [\"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\", \"7:00 PM\", \"8:00 PM\", \"9:00 PM\"];\n\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.filtersContainer}>\n                        <Dropdown\n                            title=\"Days\"\n                            items={days}\n                            selectedItems={selectedDays}\n                            onToggle={handleDaySelection}\n                        />\n                        <Dropdown\n                            title=\"Times\"\n                            items={times}\n                            selectedItems={selectedTimes}\n                            onToggle={handleTimeSelection}\n                        />\n                    </div>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n\n/*import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport moment from 'moment';\nimport styles from '../style/MovieScreenings.module.css';\n\nfunction useOutsideAlerter(ref, setter) {\n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setter(false);\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref, setter]);\n}\n\nfunction Dropdown({ title, items, selectedItems, onToggle }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, setIsOpen);\n\n    return (\n        <div className={styles.dropdown} ref={wrapperRef}>\n            <button className={styles.dropdownButton} onClick={() => setIsOpen(!isOpen)}>\n                {title}\n            </button>\n            {isOpen && (\n                <div className={styles.dropdownContent}>\n                    {items.map(item => (\n                        <label key={item} className={styles.dropdownLabel}>\n                            <input\n                                type=\"checkbox\"\n                                value={item}\n                                checked={selectedItems.includes(item)}\n                                onChange={(e) => onToggle(e.target.value)}\n                            />\n                            {item}\n                        </label>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nfunction MovieScreenings() {\n    const navigate = useNavigate();\n    const [movieInfo, setMovieInfo] = useState(null);\n    const [days, setDays] = useState([]);\n    const [times, setTimes] = useState([]);\n    const [selectedDays, setSelectedDays] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetch(`http://localhost:8080/screenings/movie/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieInfo(data);\n\n                const daySet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('ddd')));\n                const timeSet = new Set(data.screenings.map(s => moment(s.screening.startTime).format('HH:mm')));\n\n                setDays(Array.from(daySet));\n                setTimes(Array.from(timeSet));\n            })\n            .catch(error => console.error('Error fetching data:', error));\n    }, [id]);\n\n    const formatScreeningTime = timestamp => {\n        return moment(timestamp).format('LLL');\n    };\n\n    const goToScreening = screeningId => {\n        navigate(`/screenings/info/${screeningId}`);\n    };\n\n    const handleDaySelection = value => {\n        setSelectedDays(\n            selectedDays.includes(value)\n                ? selectedDays.filter(day => day !== value)\n                : [...selectedDays, value]\n        );\n    };\n\n    const handleTimeSelection = value => {\n        setSelectedTimes(\n            selectedTimes.includes(value)\n                ? selectedTimes.filter(time => time !== value)\n                : [...selectedTimes, value]\n        );\n    };\n\n    const filteredScreenings = movieInfo?.screenings.filter(screening => {\n        const day = moment(screening.screening.startTime).format('ddd');\n        const time = moment(screening.screening.startTime).format('HH:mm');\n        return (\n            (selectedDays.length === 0 || selectedDays.includes(day)) &&\n            (selectedTimes.length === 0 || selectedTimes.includes(time))\n        );\n    });\n\n    if (!movieInfo) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className={styles.movieScreeningsBody}>\n            <div className={styles.movieInfoContainerWrapper}>\n                <div className={styles.movieInfoContainerLeft}>\n                    <h2 className={`${styles.containerHeader} ${styles.movieTitle}`}>{movieInfo.movie.movieName}</h2>\n                    <div className={styles.movieDetails}>\n                        <div className={styles.movieInfo}>\n                            <p><b>Director(s):</b> {movieInfo.movie.directors}</p>\n                            <p><b>Release Year:</b> {movieInfo.movie.releaseYear}</p>\n                            <p><b>IMDb Rating:</b> {movieInfo.movie.rating}</p>\n                            <p><b>Certificate:</b> {movieInfo.movie.certificate}</p>\n                            <p><b>Runtime:</b> {movieInfo.movie.runTime}</p>\n                        </div>\n                        <div className={styles.moviePoster}>\n                            <img src={movieInfo.movie.picUrl} alt={movieInfo.movie.movieName}/>\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.movieInfoContainerRight}>\n                    <div className={styles.filtersContainer}>\n                        <Dropdown\n                            title=\"Days\"\n                            items={days}\n                            selectedItems={selectedDays}\n                            onToggle={handleDaySelection}\n                        />\n                        <Dropdown\n                            title=\"Times\"\n                            items={times}\n                            selectedItems={selectedTimes}\n                            onToggle={handleTimeSelection}\n                        />\n                    </div>\n                    <div className={styles.screeningGrid}>\n                        {filteredScreenings.map(screening => (\n                            <div key={screening.screening.id} className={styles.screeningItem}>\n                                <button\n                                    className={styles.directToScreeningButton}\n                                    onClick={() => goToScreening(screening.screening.id)}\n                                >\n                                    {formatScreeningTime(screening.screening.startTime)}\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieScreenings;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}