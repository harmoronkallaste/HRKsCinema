{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Import useState and useEffect\n\nfunction GuestPage() {\n  _s();\n  const [screenings, setScreenings] = useState([]); // State to store screenings data\n\n  useEffect(() => {\n    // Fetch screening data on component mount\n    fetch('/api/screenings') // Replace with your actual endpoint URL\n    .then(response => response.json()).then(data => setScreenings(data)).catch(error => console.error(error));\n  }, []);\n\n  // ... rest of your component logic\n}\n_s(GuestPage, \"MAzJOFbziouPqVKPs+gYN7BlZfA=\");\n_c = GuestPage;\nexport default GuestPage;\nvar _c;\n$RefreshReg$(_c, \"GuestPage\");","map":{"version":3,"names":["React","useState","useEffect","GuestPage","_s","screenings","setScreenings","fetch","then","response","json","data","catch","error","console","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/GuestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Import useState and useEffect\n\nfunction GuestPage() {\n    const [screenings, setScreenings] = useState([]); // State to store screenings data\n\n    useEffect(() => {\n        // Fetch screening data on component mount\n        fetch('/api/screenings') // Replace with your actual endpoint URL\n            .then(response => response.json())\n            .then(data => setScreenings(data))\n            .catch(error => console.error(error));\n    }, []);\n\n    // ... rest of your component logic\n}\n\nexport default GuestPage;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;;AAEpD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACZ;IACAK,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAAA,CACpBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,aAAa,CAACK,IAAI,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EAC7C,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AAACT,EAAA,CAZQD,SAAS;AAAAY,EAAA,GAATZ,SAAS;AAclB,eAAeA,SAAS;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}