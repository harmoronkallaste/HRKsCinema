{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState('Mon'); // Default day\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => response.json())\n            .then(data => {\n                // For each screening, get the count of reserved seats\n                const screeningsWithSeats = data.map(screening => {\n                    return fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(response => response.json())\n                        .then(reservedSeats => ({\n                            ...screening,\n                            reservedSeats: reservedSeats,\n                            availableSeats: screening.room.totalSeats - reservedSeats\n                        }))\n                        .catch(error => console.error('Error fetching reserved seats:', error));\n                });\n\n                Promise.all(screeningsWithSeats).then(completed => {\n                    setScreenings(completed);\n                });\n            })\n            .catch(error => console.error('Error fetching screenings:', error));\n    }, []);\n\n    const filteredScreenings = screenings.filter((screening) =>\n        moment(screening.screening.startTime).format('ddd') === selectedDay\n    );\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <h2>{screening.movie.movieName}</h2>\n                        <p>Rating: {screening.movie.rating}</p>\n                        <p>Room: {screening.room.room_name}</p>\n                        <p>Start Time: {moment(screening.screening.startTime).format('LLL')}</p>\n                        <p>Available Seats: {screening.availableSeats}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n\n)\n    ;\n}\n\nexport default AllScreenings;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllScreenings() {\n  _s();\n  const [allScreenings, setAllScreenings] = useState([]);\n  const [screenings, setScreenings] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to current day of week\n\n  useEffect(() => {\n    fetch('http://localhost:8080/allScreenings').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Screenings data:\", data); // Add this to see the actual structure of response\n      if (!Array.isArray(data)) {\n        throw new Error('Data is not an array!');\n      }\n      setAllScreenings(data);\n      filterScreeningsByDay(selectedDay, data);\n    }).catch(error => {\n      console.error('Error fetching screenings:', error);\n    });\n  }, []);\n  const filterScreeningsByDay = (day, screeningsData = allScreenings) => {\n    const filtered = screeningsData.filter(screening => moment(screening.screening.startTime).format('ddd') === day);\n    setScreenings(filtered);\n  };\n  const handleDayButtonClick = day => {\n    setSelectedDay(day);\n    filterScreeningsByDay(day);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.allScreenings,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.menuBar,\n      children: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.dayButton} ${selectedDay === day ? styles.active : ''}`,\n        onClick: () => handleDayButtonClick(day),\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.screeningsList,\n      children: screenings.map(screening => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.screeningContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: screening.movie.movieName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rating: \", screening.movie.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Room: \", screening.room.room_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Start Time: \", moment(screening.screening.startTime).format('LLL')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Available Seats: \", screening.availableSeats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, screening.screening.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(AllScreenings, \"jLnpV1w9yWtZ54vGeiD5AEdcs3o=\");\n_c = AllScreenings;\nexport default AllScreenings;\nvar _c;\n$RefreshReg$(_c, \"AllScreenings\");","map":{"version":3,"names":["React","useState","useEffect","styles","moment","jsxDEV","_jsxDEV","AllScreenings","_s","allScreenings","setAllScreenings","screenings","setScreenings","selectedDay","setSelectedDay","format","fetch","then","response","ok","Error","status","json","data","console","log","Array","isArray","filterScreeningsByDay","catch","error","day","screeningsData","filtered","filter","screening","startTime","handleDayButtonClick","className","children","menuBar","map","dayButton","active","onClick","fileName","_jsxFileName","lineNumber","columnNumber","screeningsList","screeningContainer","movie","movieName","rating","room","room_name","availableSeats","id","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js"],"sourcesContent":["/*\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState('Mon'); // Default day\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => response.json())\n            .then(data => {\n                // For each screening, get the count of reserved seats\n                const screeningsWithSeats = data.map(screening => {\n                    return fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(response => response.json())\n                        .then(reservedSeats => ({\n                            ...screening,\n                            reservedSeats: reservedSeats,\n                            availableSeats: screening.room.totalSeats - reservedSeats\n                        }))\n                        .catch(error => console.error('Error fetching reserved seats:', error));\n                });\n\n                Promise.all(screeningsWithSeats).then(completed => {\n                    setScreenings(completed);\n                });\n            })\n            .catch(error => console.error('Error fetching screenings:', error));\n    }, []);\n\n    const filteredScreenings = screenings.filter((screening) =>\n        moment(screening.screening.startTime).format('ddd') === selectedDay\n    );\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <h2>{screening.movie.movieName}</h2>\n                        <p>Rating: {screening.movie.rating}</p>\n                        <p>Room: {screening.room.room_name}</p>\n                        <p>Start Time: {moment(screening.screening.startTime).format('LLL')}</p>\n                        <p>Available Seats: {screening.availableSeats}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n\n)\n    ;\n}\n\nexport default AllScreenings;\n*/\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [allScreenings, setAllScreenings] = useState([]);\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to current day of week\n\n    useEffect(() => {\n        fetch('http://localhost:8080/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"Screenings data:\", data); // Add this to see the actual structure of response\n                if (!Array.isArray(data)) {\n                    throw new Error('Data is not an array!');\n                }\n                setAllScreenings(data);\n                filterScreeningsByDay(selectedDay, data);\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, []);\n\n    const filterScreeningsByDay = (day, screeningsData = allScreenings) => {\n        const filtered = screeningsData.filter((screening) =>\n            moment(screening.screening.startTime).format('ddd') === day\n        );\n        setScreenings(filtered);\n    };\n\n    const handleDayButtonClick = (day) => {\n        setSelectedDay(day);\n        filterScreeningsByDay(day);\n    };\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => handleDayButtonClick(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <h2>{screening.movie.movieName}</h2>\n                        <p>Rating: {screening.movie.rating}</p>\n                        <p>Room: {screening.room.room_name}</p>\n                        <p>Start Time: {moment(screening.screening.startTime).format('LLL')}</p>\n                        <p>Available Seats: {screening.availableSeats}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}