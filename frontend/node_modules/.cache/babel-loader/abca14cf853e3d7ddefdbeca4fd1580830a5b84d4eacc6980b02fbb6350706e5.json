{"ast":null,"code":"var _jsxFileName = \"/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to the current day of the week\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (!Array.isArray(data)) {\n                    throw new Error('Data is not an array!');\n                }\n                // Fetch the number of reserved seats for each screening\n                return Promise.all(data.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null }; // Indicate that seats are not available\n                        })\n                ));\n            })\n            .then(allScreeningsWithReservedSeats => {\n                setScreenings(allScreeningsWithReservedSeats.filter(screening =>\n                    moment(screening.screening.startTime).format('ddd') === selectedDay\n                ));\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay]);\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{ backgroundImage: `url(${screening.movie.picUrl})` }}>\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>Start Time: {moment(screening.screening.startTime).format('LLL')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings; */\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllScreenings() {\n  _s();\n  const [screenings, setScreenings] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(moment().format('ddd'));\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [selectedTimes, setSelectedTimes] = useState([]);\n\n  // Function to toggle times\n  const toggleTime = time => {\n    setSelectedTimes(currentTimes => currentTimes.includes(time) ? currentTimes.filter(t => t !== time) : [...currentTimes, time]);\n  };\n  const toggleGenre = genre => {\n    setSelectedGenres(currentGenres => currentGenres.includes(genre) ? currentGenres.filter(g => g !== genre) : [...currentGenres, genre]);\n  };\n  useEffect(() => {\n    fetch('http://localhost:8080/screenings/allScreenings').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      const screeningsWithGenres = data.map(screening => ({\n        ...screening,\n        genres: screening.movie.genre.split(',').map(genre => genre.trim()),\n        availableSeats: null\n      }));\n      return Promise.all(screeningsWithGenres.map(screening => fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`).then(res => res.json()).then(numberOfReservedSeats => ({\n        ...screening,\n        availableSeats: screening.room.totalSeats - numberOfReservedSeats\n      })).catch(error => {\n        console.error('Error fetching reserved seats:', error);\n        return {\n          ...screening,\n          availableSeats: null\n        };\n      })));\n    }).then(updatedScreenings => {\n      setScreenings(updatedScreenings);\n    }).catch(error => {\n      console.error('Error fetching screenings:', error);\n    });\n  }, [selectedDay, selectedGenres, selectedTimes]);\n  const genreButtons = ['Drama', 'Crime', 'Action', 'Biography', 'History'];\n  const timeButtons = [\"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"];\n\n  // Filtered screenings logic\n  const filteredScreenings = screenings.filter(screening => {\n    const screeningStartTime = moment(screening.screening.startTime);\n    const dayMatch = screeningStartTime.format('ddd') === selectedDay;\n    const genreMatch = selectedGenres.length === 0 || selectedGenres.some(genre => screening.genres.includes(genre));\n    let timeMatch = selectedTimes.length === 0; // Default to true if no time selected, false otherwise\n    if (selectedTimes.length > 0) {\n      const screeningTimeOnly = screeningStartTime.format(\"HH:mm\");\n      const screeningMomentTimeOnly = moment(screeningTimeOnly, \"HH:mm\");\n      if (selectedTimes.length === 1) {\n        const singleTime = moment(selectedTimes[0], \"HH:mm\");\n        timeMatch = screeningMomentTimeOnly.isSameOrAfter(singleTime);\n      } else {\n        const timesMoments = selectedTimes.map(time => moment(time, \"HH:mm\"));\n        const earliestTime = moment.min(timesMoments);\n        const latestTime = moment.max(timesMoments);\n        timeMatch = screeningMomentTimeOnly.isBetween(earliestTime, latestTime, undefined, '[]');\n      }\n    }\n    return dayMatch && genreMatch && timeMatch;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.allScreenings,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.menuBar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.filtersTitle,\n        children: \" Filters \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.dayOptions,\n          children: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map(day => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.dayButton} ${selectedDay === day ? styles.active : ''}`,\n            onClick: () => setSelectedDay(day),\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.timeOptions,\n          children: timeButtons.map(time => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.dayButton} ${selectedTimes.includes(time) ? styles.active : ''}`,\n            onClick: () => toggleTime(time),\n            children: time\n          }, time, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.genreOptions,\n          children: genreButtons.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: ` ${styles.dayButton} ${styles.genreButton} ${selectedGenres.includes(genre) ? styles.active : ''}`,\n            onClick: () => toggleGenre(genre),\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.screeningsList,\n      children: filteredScreenings.map(screening => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.screeningContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.moviePoster,\n          style: {\n            backgroundImage: `url(${screening.movie.picUrl})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.movieInfo,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: screening.movie.movieName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Start Time: \", moment(screening.screening.startTime).format('LLL')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Rating: \", screening.movie.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Room: \", screening.room.room_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Available Seats: \", screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buttonGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.screeningButton} ${styles.getTicketsButton}`,\n            children: \"Get tickets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.screeningButton,\n            children: \"View movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.screeningButton,\n            children: \"Schedule\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this)]\n      }, screening.screening.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n_s(AllScreenings, \"sqtxaGXjWXnpuq/GApBHLQgwtk4=\");\n_c = AllScreenings;\nexport default AllScreenings;\nvar _c;\n$RefreshReg$(_c, \"AllScreenings\");","map":{"version":3,"names":["React","useState","useEffect","styles","moment","jsxDEV","_jsxDEV","AllScreenings","_s","screenings","setScreenings","selectedDay","setSelectedDay","format","selectedGenres","setSelectedGenres","selectedTimes","setSelectedTimes","toggleTime","time","currentTimes","includes","filter","t","toggleGenre","genre","currentGenres","g","fetch","then","response","ok","Error","status","json","data","screeningsWithGenres","map","screening","genres","movie","split","trim","availableSeats","Promise","all","id","res","numberOfReservedSeats","room","totalSeats","catch","error","console","updatedScreenings","genreButtons","timeButtons","filteredScreenings","screeningStartTime","startTime","dayMatch","genreMatch","length","some","timeMatch","screeningTimeOnly","screeningMomentTimeOnly","singleTime","isSameOrAfter","timesMoments","earliestTime","min","latestTime","max","isBetween","undefined","className","allScreenings","children","menuBar","filtersTitle","fileName","_jsxFileName","lineNumber","columnNumber","buttonContainer","dayOptions","day","dayButton","active","onClick","timeOptions","genreOptions","genreButton","screeningsList","screeningContainer","moviePoster","style","backgroundImage","picUrl","movieInfo","movieName","rating","room_name","buttonGroup","screeningButton","getTicketsButton","_c","$RefreshReg$"],"sources":["/Users/harmoronkallaste/Desktop/kinoapp/frontend/src/pages/AllScreenings.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd')); // Default to the current day of the week\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                if (!Array.isArray(data)) {\n                    throw new Error('Data is not an array!');\n                }\n                // Fetch the number of reserved seats for each screening\n                return Promise.all(data.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null }; // Indicate that seats are not available\n                        })\n                ));\n            })\n            .then(allScreeningsWithReservedSeats => {\n                setScreenings(allScreeningsWithReservedSeats.filter(screening =>\n                    moment(screening.screening.startTime).format('ddd') === selectedDay\n                ));\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay]);\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                    <button\n                        key={day}\n                        className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                        onClick={() => setSelectedDay(day)}\n                    >\n                        {day}\n                    </button>\n                ))}\n            </div>\n            <div className={styles.screeningsList}>\n                {screenings.map((screening) => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{ backgroundImage: `url(${screening.movie.picUrl})` }}>\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>Start Time: {moment(screening.screening.startTime).format('LLL')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings; */\n\nimport React, { useState, useEffect } from 'react';\nimport styles from '../style/AllScreenings.module.css';\nimport moment from 'moment';\n\nfunction AllScreenings() {\n\n    const [screenings, setScreenings] = useState([]);\n    const [selectedDay, setSelectedDay] = useState(moment().format('ddd'));\n    const [selectedGenres, setSelectedGenres] = useState([]);\n    const [selectedTimes, setSelectedTimes] = useState([]);\n\n    // Function to toggle times\n    const toggleTime = (time) => {\n        setSelectedTimes(currentTimes =>\n            currentTimes.includes(time) ? currentTimes.filter(t => t !== time) : [...currentTimes, time]\n        );\n    };\n\n    const toggleGenre = (genre) => {\n        setSelectedGenres(currentGenres =>\n            currentGenres.includes(genre) ? currentGenres.filter(g => g !== genre) : [...currentGenres, genre]\n        );\n    };\n\n    useEffect(() => {\n        fetch('http://localhost:8080/screenings/allScreenings')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(data => {\n                const screeningsWithGenres = data.map(screening => ({\n                    ...screening,\n                    genres: screening.movie.genre.split(',').map(genre => genre.trim()),\n                    availableSeats: null\n                }));\n\n                return Promise.all(screeningsWithGenres.map(screening =>\n                    fetch(`http://localhost:8080/reservations/howManyReserved/${screening.screening.id}`)\n                        .then(res => res.json())\n                        .then(numberOfReservedSeats => ({\n                            ...screening,\n                            availableSeats: screening.room.totalSeats - numberOfReservedSeats\n                        }))\n                        .catch(error => {\n                            console.error('Error fetching reserved seats:', error);\n                            return { ...screening, availableSeats: null };\n                        })\n                ));\n            })\n            .then(updatedScreenings => {\n                setScreenings(updatedScreenings);\n            })\n            .catch(error => {\n                console.error('Error fetching screenings:', error);\n            });\n    }, [selectedDay, selectedGenres, selectedTimes]);\n\n    const genreButtons = ['Drama', 'Crime', 'Action', 'Biography', 'History'];\n    const timeButtons = [\"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\"];\n\n    // Filtered screenings logic\n    const filteredScreenings = screenings.filter(screening => {\n        const screeningStartTime = moment(screening.screening.startTime);\n        const dayMatch = screeningStartTime.format('ddd') === selectedDay;\n        const genreMatch = selectedGenres.length === 0 || selectedGenres.some(genre => screening.genres.includes(genre));\n\n        let timeMatch = selectedTimes.length === 0; // Default to true if no time selected, false otherwise\n        if (selectedTimes.length > 0) {\n            const screeningTimeOnly = screeningStartTime.format(\"HH:mm\");\n            const screeningMomentTimeOnly = moment(screeningTimeOnly, \"HH:mm\");\n            if (selectedTimes.length === 1) {\n                const singleTime = moment(selectedTimes[0], \"HH:mm\");\n                timeMatch = screeningMomentTimeOnly.isSameOrAfter(singleTime);\n            } else {\n                const timesMoments = selectedTimes.map(time => moment(time, \"HH:mm\"));\n                const earliestTime = moment.min(timesMoments);\n                const latestTime = moment.max(timesMoments);\n                timeMatch = screeningMomentTimeOnly.isBetween(earliestTime, latestTime, undefined, '[]');\n            }\n        }\n\n        return dayMatch && genreMatch && timeMatch;\n    });\n\n\n    return (\n        <div className={styles.allScreenings}>\n            <div className={styles.menuBar}>\n                <div className={styles.filtersTitle}> Filters </div>\n                <div className={styles.buttonContainer}>\n                    <div className={styles.dayOptions}>\n                        {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day) => (\n                            <button\n                                key={day}\n                                className={`${styles.dayButton} ${selectedDay === day ? styles.active : ''}`}\n                                onClick={() => setSelectedDay(day)}\n                            >\n                                {day}\n                            </button>\n\n                        ))}\n                    </div>\n                    <div className={styles.timeOptions}>\n                        {timeButtons.map(time => (\n                            <button\n                                key={time}\n                                className={`${styles.dayButton} ${selectedTimes.includes(time) ? styles.active : ''}`}\n                                onClick={() => toggleTime(time)}\n                            >\n                                {time}\n                            </button>\n                        ))}\n                    </div>\n                    <div className={styles.genreOptions}>\n                        {genreButtons.map((genre) => (\n                            <button\n                                key={genre}\n                                className={` ${styles.dayButton} ${styles.genreButton} ${selectedGenres.includes(genre) ? styles.active : ''}`}\n                                onClick={() => toggleGenre(genre)}\n                            >\n                                {genre}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            {/*<div className={styles.genreFilter}>\n                {['Drama', 'Crime', 'Action', 'Biography', 'History'].map(genre => (\n                    <label key={genre}>\n                        <input\n                            type=\"checkbox\"\n                            checked={selectedGenres.includes(genre)}\n                            onChange={() => toggleGenre(genre)}\n                        />\n                        {genre}\n                    </label>\n                ))}\n            </div> */}\n            <div className={styles.screeningsList}>\n                {filteredScreenings.map(screening => (\n                    <div key={screening.screening.id} className={styles.screeningContainer}>\n                        <div className={styles.moviePoster} style={{backgroundImage: `url(${screening.movie.picUrl})`}}>\n                            {/* Image will be displayed via background */}\n                        </div>\n                        <div className={styles.movieInfo}>\n                            <h2>{screening.movie.movieName}</h2>\n                            <h3>Start Time: {moment(screening.screening.startTime).format('LLL')}</h3>\n                            <p>Rating: {screening.movie.rating}</p>\n                            <p>Room: {screening.room.room_name}</p>\n                            <p>Available Seats: {screening.availableSeats !== null ? `${screening.availableSeats} / ${screening.room.totalSeats}` : 'Loading...'}</p>\n                        </div>\n                        <div className={styles.buttonGroup}>\n                            <button className={`${styles.screeningButton} ${styles.getTicketsButton}`}>Get tickets</button>\n                            <button className={styles.screeningButton}>View movie</button>\n                            <button className={styles.screeningButton}>Schedule</button>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default AllScreenings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}